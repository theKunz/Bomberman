package cs2114.bomberman;

import cs2114.bomberman.BoardCell.CellTypes;


// -------------------------------------------------------------------------
/**
 * The model of the BomberMan program. This class creates a 2D array of cell
 * types and allows us to set and get these values.
 *
 * @author zhinson
 * @author aaronk1
 * @author crc1559
 * @version Nov 12, 2013
 */
public class Board
{
    /**
     * CellTypes array that contains each cell of the board. Referenced in
     * AlliedBomb.
     */
    public static CellTypes[][] cells;

    // ----------------------------------------------------------
    /**
     * Creates a 7x11 2-D array list that stores all of the cell types.
     */
    public Board()
    {
        cells = new CellTypes[7][11];
        //fills the grid of cell types
        for (int i = 0; i < 7; i++)
        {

            for (int k = 0; k < 11; k++)
            {
                cells[i][k] = CellTypes.PATH;
            }
        }
        //sets the immovable walls (and some destrucable walls)
        for (int i = 1; i <= 5; i += 2)
        {
            for (int j = 1; j <= 9; j += 2)
            {
                cells[i][j] = CellTypes.WALL;
            }

            if (i == 1 || i == 5)
            {
                for (int k = 2; k <=8; k+= 2)
                {
                    cells[i][k] = CellTypes.DEBRIS;
                }
            }
        }
        //sets remaining destructable walls
        cells[0][5] = CellTypes.DEBRIS;
        cells[6][5] = CellTypes.DEBRIS;
        cells[3][0] = CellTypes.DEBRIS;
        cells[3][10] = CellTypes.DEBRIS;
        for (int i = 2; i <= 4; i += 2)
        {
            for (int h = 1; h <=9; h += 2)
            {
                cells[i][h] = CellTypes.DEBRIS;
            }
        }
    }

    // ----------------------------------------------------------
    /**
     * Returns the cell at the location provided.
     * @param loc - the location of the cell you are getting.
     * @return the type of cell at location. Could be Wall, debris, or invalid.
     */
    public CellTypes getCell(Location loc)
    {
        return cells[loc.x()][loc.y()];
    }

    // ----------------------------------------------------------
    /**
     * Sets the cell at loc to type cell.
     * @param loc - the location of the cell you are setting.
     * @param cell - the type of cell this loc will be set to.
     */
    public void setCell(Location loc, CellTypes cell)
    {
        if (loc != null)
        {
            cells[loc.x()][loc.y()] = cell;
        }
    }


}
