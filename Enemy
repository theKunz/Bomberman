package cs2114.bomberman;

import sofia.util.Random;
import com.proj3.bomberman.BoardCell.CellTypes;

// -------------------------------------------------------------------------
/**
 * The enemy that will walk around randomly and try to kill bomberman
 *
 * @author crc1559
 * @author zhinson
 * @author aaronk1
 * @version 11.12.2013
 */
public class Enemy
{
    private Location loc;
    private Board board;
    private boolean hasPlacedBomb;
    private int countdownToNewBomb;

    // ----------------------------------------------------------
    /**
     * Constructor, sets an enemy at the location
     * @param startLocation
     * @param bo the board we are accessing.
     */
    public Enemy(Location startLocation, Board bo)
    {
        loc = startLocation;
        board = bo;
        hasPlacedBomb = false;
        countdownToNewBomb = 0;
    }

    /**
     * this is here to ensure that an action is carried out and null is never
     * returned as a movement
     * @return new location or bomb location
     */
    public Location action()
    {
        Location oldLocation = new Location (loc.x(), loc.y());
        Location retLoc = getAction();
        while (retLoc == null)
        {
            retLoc = getAction();
        }
        //ensures countdown only occurs when enemy moves and not when
        //enemy placed the bomb as well
        if (!oldLocation.equals(loc))
        {
            countDown();
        }
        return retLoc;
    }

    /**
    * returns either null or a Location. The Screen will then read the
    * returned action accordingly. A null return will have the enemy do nothing
    * With a location return, the screen will move the enemy to the new
    * location. If the location is its current position, it will drop a
    * bomb.
    * @return The randomly determined action
    */
    private Location getAction()
    {
        Random rand = Random.generator();
        int num = (int)Math.floor(rand.nextDouble(0, 5));
        switch (num)
        {
            case (0):
                if (board.getCell(loc.north()) == CellTypes.PATH
                    && loc.y() > 0)
                {
                    loc = new Location(loc.x(), loc.y() - 1);
                    return loc;
                }
                return null;
            case(1):
                if (board.getCell(loc.south()) == CellTypes.PATH
                    && loc.y() < 10)
                {
                    loc = new Location(loc.x(), loc.y() + 1);
                    return loc;
                }
                return null;
            case(2):
                if (board.getCell(loc.east()) == CellTypes.PATH
                    && loc.x() < 6)
                {
                    loc = new Location(loc.x() + 1, loc.y());
                    return loc;
                }
                return null;
            case(3):
                if (board.getCell(loc.west()) == CellTypes.PATH
                    && loc.x() > 0)
                {
                    loc = new Location(loc.x() - 1, loc.y());
                    return loc;
                }
                return null;
            case(4):
                if (hasPlacedBomb == true)
                {
                    return null;
                }
                hasPlacedBomb = true;
                countdownToNewBomb = 3;
                return loc;
        }
        return null;

    }

    /**
     * Returns the current location of the Enemy
     * @return Location object
     */
    public Location getLocation()
    {
        return loc;
    }

    // ----------------------------------------------------------
    /**
     * Place a description of your method here.
     * @param locs the new Location
     */
    public void setLocation(Location locs)
    {
        loc = locs;
    }

    /**
     * for updating the status of the board, such as when bombs go off and
     * edit DEBRIS to PATH
     * @param newBoard the new updated board
     */
    public void updateBoard(Board newBoard)
    {
        board = newBoard;
    }

    private void countDown()
    {
        //decrement countdown if bomb has been placed
        if (countdownToNewBomb > 0 && hasPlacedBomb)
        {
            countdownToNewBomb--;
        }
        //if it reaches 0, the bomb has then exploded and the enemy is
        //able to place another bomb
        if (countdownToNewBomb == 0 && hasPlacedBomb)
        {
            hasPlacedBomb = false;
            countdownToNewBomb = 3;
        }
    }

}
