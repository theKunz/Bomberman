package cs2114.bomberman;

import cs2114.bomberman.BoardCell.CellTypes;

// -------------------------------------------------------------------------
/**
 *  this is our AlliedBomb class.
 *  This bomb will be placed by the player It will destroy debris and
 *  damage the player controlled bomberman. it will harm NPC bombermans.
 *
 * @author zhinson
 * @author crc1559
 * @author theKunz
 * @version 11.12.2013
 */

public class AlliedBomb
{
    private Location location;
    /**
     * range of the explosion
     */
    private int explosionRadius;
    /**
     * this tracks how many steps the player has remaining before the bomb
     * goes off
     */
    private int fuseRemaining;
    /**
     * tracks if the bomb has exploded or not
     */
    private boolean hasExploded;
    /**
     * x location
     */
    private int x;
    /**
     * y location
     */
    private int y;

    /**
     * constructor for the class
     * @param x takes an x coordinate
     * @param y takes a y coordinate
     * @param fuse takes a fuse length
     * @param radius takes a bomb explosion length
     */
    public AlliedBomb(int xLoc, int yLoc, int fuse, int radius)
    {
        if (x >= 0 && y >= 0 && y < 11 && x < 7 &&
            //does bounds checking
            fuse >= 2 && radius >= 1)
            //two more checks
        {
            fuseRemaining = fuse;
            explosionRadius = radius;
            hasExploded = false;
        }
        //i don't ever want my maxFuse to be less than 2
        //          this allows bomberman to move away safely from his bombs
        //or my radius to be less than 1
        //          this allows bombs to actually destroy things
    }

    /**
     * tracks the number of steps until explosionsssssssss!
     */
    public void countdown()
    {
        if (fuseRemaining > 1)
        {
        fuseRemaining--;
        //decrement the time remaining until the explosion
        }
        else if (fuseRemaining <= 1 && !hasExploded())
            //if fuse remaining is 1 and this is called, go boom
            //but don't go boom more than once
        {
            explode();
        }
    }

    /**
     * returns if the bomb has exploded or not
     * @return true if explode has been called false if not
     */
    public boolean hasExploded()
    {
        return hasExploded;
    }

    /**
     * when countdown has expired, go boom!
     */
    public void explode()
    {
        hasExploded = true;
        explodeNorth();
        explodeSouth();
        explodeEast();
        explodeWest();
    }

    public void explodeNorth()
    {
        for (int i = 1; i <= explosionRadius; i++)
        {
            location = new Location(x, y - i);
            helpExplode();
            /** for all of these I need to figure out
             * how to be able to tell if it hits a wall / debris / bomberman
             * and when that happens, destory (unless wall) the object
             * and break out of the loop
             */
        }

    }

    public void explodeSouth()
    {
        for (int i = 1; i <= explosionRadius; i++)
        {
            location = new Location(x, y + i);
            helpExplode();
        }
    }

    public void explodeEast()
    {
        for (int i = 1; i <= explosionRadius; i++)
        {
            location = new Location(x + i, y);
            helpExplode();
        }
    }

    public void explodeWest()
    {
        for (int i = 1; i <= explosionRadius; i++)
        {
            location = new Location(x - i, y);
            helpExplode();
        }
    }

    public void helpExplode()
    {
        if (Board.cells[location.x()][location.y()] == CellTypes.DEBRIS)
        {
        Board.cells[location.x()][location.y()] = CellTypes.PATH;
        }
    }


    /**
     * returns x
     * @return x x loc
     */
    public int getX()
    {
        return x;
    }
    /**
     * returns y
     * @return y y loc
     */
    public int getY()
    {
        return y;
    }
}
